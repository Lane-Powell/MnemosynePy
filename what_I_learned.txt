Lessons I learned in writing Mnemosyne:

1. Keep a notebook
I've long understood the importance writing notes and outlines in the learning and planning process, but when I started this project I seriously underestimated the power of keeping pen and paper handy at all times while coding, whether for sketching control flow or to aid short-term memory.


2. One representation of fields for records

One of the first things I did when I started work on Mnemosyne was to define the fields I wanted each record to have. Once I did this, however, I proceeded on the assumption that this list should be extensible in the future (whether by myself or a mythical end-user). To achieve this, I allowed the dictionaries that represent records (and which are passed between Library and Text objects) to be "field-agnostic": neither class defines what fields, which are implemented as dictionary keys, the record contains. In comes the footgun: to actually make this system usable, I obviously have to be able to use those keys, and I ended up hard-coding them wherever they were needed, which is pretty much the worst possible solution. I should have ensured that there was only one definitive representation of this information--possibly in the Library class--which would have made the code shorter, more readable, and easier to extend.


3. Class structure

When I initially designed Mnemosyne, it seemed obvious that there should be two main classes: one for the Libraries the program stores records in and retrieves them from, and another for the Texts they contain. Less obvious at the time was what methods those should contain, and I now think my answer should have been more inclusive in a sense. For example, the write_to_libary function, which passes a new or modified Text object to a Library's contents for overwriting or appending, does not belond to either class: my rationale was that it involves an interaction between two separate classes, but it's now clear to me that, logically, since it's a function of a library to store records, it should have a method to do so.

There is another solution, suggested by my program's notion of the "librarian," which is a concept embodied not by a Librarian class but by the call_librarian function. This function is called repeatedly in the main loop to take and execute commands from the user, a sort of procedural solution to the problem it solves. In retrospect, since I was already using a more "object-oriented" style in the rest of the program, it would have made sense to define the librarian as a class, with an "interpret" method that is called repeatedly in the main loop and that then decides which of its other methods to call based on the input. Many pieces of my rather lengthy call_library function could have been split apart into separate Librarian methods. Other functions that are now separate, like write_to_library and browse, would also logically be Librarian methods.


4. Setters, getters, changers, and initializers

Initially, and for a long time afterward, changing an existing record involves assigning them manually. This is bad from more than one standpoint, not least being the readability of the code. I belatedly implemented a text.edit method to clean up the mess of text.info[field] = whatevers scattered throughout the program, but even this was something of a bandaid. Stuff like that should have been implemented from the start, which, along with the previous two points, would have resulted in an easier program to extend.

Note that after realizing this, the Text initializer still does not initialize the actual contents of the record, which has to be set after with repeated calls to Text.edit (one for every field). I have not changed this simply because doing so would be more work than it's probably worth at this point. This is a testament to the power of design, for good and for evil.


5. User input and separation of concerns

The first step of creating Mnemosyne was to write the basic classes, methods, and functions involved in making and editing records. The second step was to write functions that received and executed commands from the user. Looking at that previous sentence, it's clear that "receiving" and "executing" are different actions, and should therefore be different functions, but in practice I made a lot of mistakes while writing them. Take the "newlib" command, for example. When call_librarian receives this command, it prompts the user to enter the name of the new library, validates that input, and then calls the create_library function if nothing was wrong. create_library is only responsible for what it says in its name, as should be the case--but originally, it was also responsible for taking and handling input! This became a problem when I tried to have another Python script import this function: in that script I simply needed to create the library, not create the library AND accept input regarding its name, which the script already had. This violation of separation of concerns not only, at times, made my code less harder to understand and debug, but made its components hard or impossible to reuse without modifcation.


6. Input validation

As soon as Mnemosyne started accepting command line input, it started crashing a lot more. For example, whatever is put into the "Rating" field is passed into Python's int function, and if the latter can't handle the input, it throws a ValueError exception and the program crashes. Worse, it was possible to pass "wrong" input that DIDN'T cause the program to crash. What if a user enters a record with a blank Title or Attribution? All books should have those (even if the latter is "Unknown" or "Anonymous"), so this needs to be checked as much as a potential crash. The problem with my solution to this follows from the problem I addressed in section 2: since there is no one place where the fields valid for a given library are represented, there can be no one source of responsibility for their validation. The result: every function that accepts input must perform its own validation, which resulted in a lot of copy-pasted code, and a more tedious testing process.


7. Summary

Most of above difficulties are addressed in principles commonly found in programming turotials, videos, or in books like The Pragmatic Programmer and Code Complete. But it's one thing to be able to recite such principles, and other to understand from experience why they are principles in the first place. I'm proud of Mnemosyne, not because it's a groundbreaking work of code (it's certainly not), but because it's not only something I use pretty often, but because I learned a lot in the process of writing it, and I recall those lessons every time I type python3 M (and then hit tab to autocomplete) in the terminal.
